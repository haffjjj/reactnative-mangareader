__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Dialog/DialogStackedActions.react.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _Button = _require(_dependencyMap[4], "../Button");

    var _Button2 = _interopRequireDefault(_Button);

    var _utils = _require(_dependencyMap[5], "../utils");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        DialogStackedActions: {
            displayName: "DialogStackedActions"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Dialog/DialogStackedActions.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var propTypes = {
        actions: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
        onActionPress: _propTypes2.default.func.isRequired,
        options: _propTypes2.default.objectOf(_propTypes2.default.object),
        style: _propTypes2.default.shape({
            stackedActionsContainer: _utils.ViewPropTypes.style
        })
    };
    var defaultProps = {
        style: {},
        options: {}
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    function getStyles(props, context) {
        var dialog = context.uiTheme.dialog;
        return {
            stackedActionsContainer: [dialog.stackedActionsContainer, props.style.stackedActionsContainer]
        };
    }

    var DialogStackedActions = _wrapComponent("DialogStackedActions")(function (_PureComponent) {
        _inherits(DialogStackedActions, _PureComponent);

        function DialogStackedActions() {
            _classCallCheck(this, DialogStackedActions);

            return _possibleConstructorReturn(this, (DialogStackedActions.__proto__ || Object.getPrototypeOf(DialogStackedActions)).apply(this, arguments));
        }

        _createClass(DialogStackedActions, [{
            key: "renderAction",
            value: function renderAction(action) {
                var _props = this.props,
                    options = _props.options,
                    onActionPress = _props.onActionPress;
                var isButtonDisabled = options["" + action] && options["" + action].disabled;
                return _react3.default.createElement(_Button2.default, {
                    key: action,
                    primary: true,
                    disabled: isButtonDisabled,
                    text: action,
                    onPress: onActionPress,
                    style: {
                        container: {
                            justifyContent: 'flex-end'
                        }
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 42
                    }
                });
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var actions = this.props.actions;
                var styles = getStyles(this.props, this.context);
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.stackedActionsContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 62
                        }
                    },
                    actions.map(function (action) {
                        return _this2.renderAction(action);
                    })
                );
            }
        }]);

        return DialogStackedActions;
    }(_react2.PureComponent));

    DialogStackedActions.propTypes = propTypes;
    DialogStackedActions.defaultProps = defaultProps;
    DialogStackedActions.contextTypes = contextTypes;
    exports.default = DialogStackedActions;
});