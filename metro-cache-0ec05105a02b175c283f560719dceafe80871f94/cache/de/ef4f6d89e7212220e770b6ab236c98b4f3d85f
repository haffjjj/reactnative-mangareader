__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-simple-dialogs/src/TouchableEffect.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        TouchableEffect: {
            displayName: "TouchableEffect"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-simple-dialogs/src/TouchableEffect.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var OS = _reactNative.Platform.OS;

    var TouchableEffect = _wrapComponent("TouchableEffect")(function (_Component) {
        _inherits(TouchableEffect, _Component);

        function TouchableEffect() {
            _classCallCheck(this, TouchableEffect);

            return _possibleConstructorReturn(this, (TouchableEffect.__proto__ || Object.getPrototypeOf(TouchableEffect)).apply(this, arguments));
        }

        _createClass(TouchableEffect, [{
            key: "render",
            value: function render() {
                var touchable = void 0;

                if (OS === 'android') {
                    touchable = _react3.default.createElement(_reactNative.TouchableNativeFeedback, _extends({}, this.props, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 42
                        }
                    }));
                } else {
                    touchable = _react3.default.createElement(_reactNative.TouchableOpacity, _extends({}, this.props, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 44
                        }
                    }));
                }

                return touchable;
            }
        }]);

        return TouchableEffect;
    }(_react2.Component));

    if (OS === 'android') {
        TouchableEffect.propTypes = _extends({}, _reactNative.TouchableNativeFeedback.propTypes);
    } else {
        TouchableEffect.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes);
    }

    TouchableEffect.defaultProps = {
        background: OS === 'android' ? _reactNative.TouchableNativeFeedback.SelectableBackground() : undefined
    };
    exports.default = TouchableEffect;
});