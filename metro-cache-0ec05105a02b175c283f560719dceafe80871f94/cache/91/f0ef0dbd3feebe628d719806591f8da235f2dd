__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Avatar/Avatar.react.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _utils = _require(_dependencyMap[4], "../utils");

    var _Icon = _require(_dependencyMap[5], "../Icon");

    var _Icon2 = _interopRequireDefault(_Icon);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Avatar: {
            displayName: "Avatar"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Avatar/Avatar.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var propTypes = {
        image: _propTypes2.default.shape({
            type: _propTypes2.default.oneOf([_reactNative.Image])
        }),
        icon: _propTypes2.default.string,
        iconColor: _propTypes2.default.string,
        iconSize: _propTypes2.default.number,
        text: _propTypes2.default.string,
        size: _propTypes2.default.number,
        style: _propTypes2.default.shape({
            container: _utils.ViewPropTypes.style,
            content: _reactNative.Text.propTypes.style
        })
    };
    var defaultProps = {
        image: null,
        icon: null,
        iconColor: null,
        iconSize: null,
        text: null,
        size: 48,
        style: {}
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    function getStyles(props, context) {
        var avatar = context.uiTheme.avatar;
        var size = props.size;
        var local = {};

        if (size) {
            local.container = {
                height: size,
                width: size,
                borderRadius: size / 2
            };
        }

        return {
            container: [avatar.container, local.container, props.style.container],
            content: [avatar.content, local.content, props.style.content]
        };
    }

    var Avatar = _wrapComponent("Avatar")(function (_PureComponent) {
        _inherits(Avatar, _PureComponent);

        function Avatar() {
            _classCallCheck(this, Avatar);

            return _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).apply(this, arguments));
        }

        _createClass(Avatar, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    image = _props.image,
                    icon = _props.icon,
                    iconSize = _props.iconSize,
                    iconColor = _props.iconColor,
                    text = _props.text;
                var content = null;
                var _context$uiTheme = this.context.uiTheme,
                    avatar = _context$uiTheme.avatar,
                    spacing = _context$uiTheme.spacing;
                var styles = getStyles(this.props, this.context);

                if (icon) {
                    var color = iconColor || _reactNative.StyleSheet.flatten(avatar.content).color;

                    var size = iconSize || spacing.iconSize;
                    content = _react3.default.createElement(_Icon2.default, {
                        name: icon,
                        color: color,
                        size: size,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 96
                        }
                    });
                } else if (text) {
                    content = _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.content,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 98
                            }
                        },
                        text
                    );
                } else if (image) {
                    content = image;
                }

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            flexGrow: 1
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 105
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 106
                            }
                        },
                        content
                    )
                );
            }
        }]);

        return Avatar;
    }(_react2.PureComponent));

    Avatar.propTypes = propTypes;
    Avatar.defaultProps = defaultProps;
    Avatar.contextTypes = contextTypes;
    exports.default = Avatar;
});