__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Icon/index.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _MaterialIcons = _require(_dependencyMap[2], "react-native-vector-icons/MaterialIcons");

    var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons);

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Icon: {
            displayName: "Icon"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Icon/index.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var propTypes = {
        name: _propTypes2.default.string.isRequired,
        style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array]),
        size: _propTypes2.default.number,
        color: _propTypes2.default.string
    };
    var defaultProps = {
        size: null,
        color: null,
        style: null
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    var Icon = _wrapComponent("Icon")(function (_PureComponent) {
        _inherits(Icon, _PureComponent);

        function Icon() {
            _classCallCheck(this, Icon);

            return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).apply(this, arguments));
        }

        _createClass(Icon, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    name = _props.name,
                    style = _props.style,
                    size = _props.size,
                    color = _props.color;
                var _context$uiTheme = this.context.uiTheme,
                    palette = _context$uiTheme.palette,
                    spacing = _context$uiTheme.spacing;
                var iconColor = color || palette.secondaryTextColor;
                var iconSize = size || spacing.iconSize;
                return _react3.default.createElement(_MaterialIcons2.default, {
                    name: name,
                    size: iconSize,
                    color: iconColor,
                    style: style,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 33
                    }
                });
            }
        }]);

        return Icon;
    }(_react2.PureComponent));

    Icon.propTypes = propTypes;
    Icon.defaultProps = defaultProps;
    Icon.contextTypes = contextTypes;
    exports.default = Icon;
});