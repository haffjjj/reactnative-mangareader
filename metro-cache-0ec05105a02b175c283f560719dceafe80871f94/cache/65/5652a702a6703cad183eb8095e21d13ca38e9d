__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Button/Button.react.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _utils = _require(_dependencyMap[4], "../utils");

    var _Icon = _require(_dependencyMap[5], "../Icon");

    var _Icon2 = _interopRequireDefault(_Icon);

    var _RippleFeedback = _require(_dependencyMap[6], "../RippleFeedback");

    var _RippleFeedback2 = _interopRequireDefault(_RippleFeedback);

    var _getPlatformElevation = _require(_dependencyMap[7], "../styles/getPlatformElevation");

    var _getPlatformElevation2 = _interopRequireDefault(_getPlatformElevation);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Button: {
            displayName: "Button"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Button/Button.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var propTypes = {
        testID: _propTypes2.default.string,
        disabled: _propTypes2.default.bool,
        raised: _propTypes2.default.bool,
        onPress: _propTypes2.default.func,
        onLongPress: _propTypes2.default.func,
        text: _propTypes2.default.string.isRequired,
        upperCase: _propTypes2.default.bool,
        icon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
        style: _propTypes2.default.shape({
            container: _utils.ViewPropTypes.style,
            text: _reactNative.Text.propTypes.style
        }),
        primary: _propTypes2.default.bool,
        accent: _propTypes2.default.bool
    };
    var defaultProps = {
        testID: null,
        icon: null,
        onPress: null,
        onLongPress: null,
        primary: false,
        accent: false,
        disabled: false,
        raised: false,
        upperCase: true,
        style: {}
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    function getStyles(props, context, state) {
        var _context$uiTheme = context.uiTheme,
            button = _context$uiTheme.button,
            buttonFlat = _context$uiTheme.buttonFlat,
            buttonRaised = _context$uiTheme.buttonRaised,
            buttonDisabled = _context$uiTheme.buttonDisabled,
            buttonRaisedDisabled = _context$uiTheme.buttonRaisedDisabled;
        var primary = props.primary,
            accent = props.accent,
            disabled = props.disabled,
            raised = props.raised;
        var palette = context.uiTheme.palette;
        var local = {
            container: {}
        };

        if (!disabled) {
            if (primary && !raised) {
                local.text = {
                    color: palette.primaryColor
                };
            } else if (accent && !raised) {
                local.text = {
                    color: palette.accentColor
                };
            }

            if (primary && raised) {
                local.container.backgroundColor = palette.primaryColor;
                local.text = {
                    color: palette.canvasColor
                };
            } else if (accent && raised) {
                local.container.backgroundColor = palette.accentColor;
                local.text = {
                    color: palette.canvasColor
                };
            }
        }

        if (raised && !disabled) {
            local.container = _extends({}, local.container, (0, _getPlatformElevation2.default)(state.elevation));
        }

        return {
            container: [button.container, !raised && buttonFlat.container, raised && buttonRaised.container, !raised && disabled && buttonDisabled.container, raised && disabled && buttonRaisedDisabled.container, local.container, props.style.container],
            text: [button.text, !raised && buttonFlat.text, raised && buttonRaised.text, !raised && disabled && buttonDisabled.text, raised && disabled && buttonRaisedDisabled.text, local.text, props.style.text],
            icon: [button.icon, !raised && buttonFlat.icon, disabled && buttonDisabled.icon, raised && buttonRaised.icon, local.icon, props.style.icon]
        };
    }

    var Button = _wrapComponent("Button")(function (_PureComponent) {
        _inherits(Button, _PureComponent);

        function Button(props) {
            _classCallCheck(this, Button);

            var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

            _this.onPress = function () {
                var _this$props = _this.props,
                    text = _this$props.text,
                    onPress = _this$props.onPress;

                if (onPress) {
                    onPress(text);
                }
            };

            _this.setElevation = function () {
                _this.setState({
                    elevation: 4
                });
            };

            _this.removeElevation = function () {
                _this.setState({
                    elevation: 2
                });
            };

            _this.renderIcon = function (styles) {
                var icon = _this.props.icon;

                var textFlatten = _reactNative.StyleSheet.flatten(styles.text);

                if (!icon) {
                    return null;
                }

                var result = void 0;

                if (_react3.default.isValidElement(icon)) {
                    result = icon;
                } else if (typeof icon === 'string') {
                    result = _react3.default.createElement(_Icon2.default, {
                        name: icon,
                        color: textFlatten.color,
                        style: styles.icon,
                        size: 24,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 182
                        }
                    });
                }

                return result;
            };

            _this.state = {
                elevation: 2
            };
            return _this;
        }

        _createClass(Button, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    text = _props.text,
                    disabled = _props.disabled,
                    raised = _props.raised,
                    upperCase = _props.upperCase,
                    onLongPress = _props.onLongPress,
                    testID = _props.testID;
                var styles = getStyles(this.props, this.context, this.state);

                var content = _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        pointerEvents: "box-only",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 200
                        }
                    },
                    this.renderIcon(styles),
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.text,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 202
                            }
                        },
                        upperCase ? text.toUpperCase() : text
                    )
                );

                if (disabled) {
                    return content;
                }

                return _react3.default.createElement(
                    _RippleFeedback2.default,
                    {
                        testID: testID,
                        onPress: !disabled ? this.onPress : null,
                        onLongPress: !disabled ? onLongPress : null,
                        onPressIn: raised ? this.setElevation : null,
                        onPressOut: raised ? this.removeElevation : null,
                        delayPressIn: 50,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 213
                        }
                    },
                    content
                );
            }
        }]);

        return Button;
    }(_react2.PureComponent));

    Button.propTypes = propTypes;
    Button.defaultProps = defaultProps;
    Button.contextTypes = contextTypes;
    exports.default = Button;
});