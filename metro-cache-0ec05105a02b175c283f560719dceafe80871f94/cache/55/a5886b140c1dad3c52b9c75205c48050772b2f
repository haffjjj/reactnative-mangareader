__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Badge/Badge.react.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _Icon = _require(_dependencyMap[4], "../Icon");

    var _Icon2 = _interopRequireDefault(_Icon);

    var _utils = _require(_dependencyMap[5], "../utils");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Badge: {
            displayName: "Badge"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Badge/Badge.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var propTypes = {
        children: _propTypes2.default.node,
        text: _propTypes2.default.string,
        icon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
            name: _propTypes2.default.string,
            color: _propTypes2.default.string,
            size: _propTypes2.default.number
        })]),
        size: _propTypes2.default.number,
        stroke: _propTypes2.default.number,
        style: _propTypes2.default.oneOfType([_propTypes2.default.shape({
            container: _utils.ViewPropTypes.style,
            strokeContainer: _utils.ViewPropTypes.style,
            content: _reactNative.Text.propTypes.style
        }), _propTypes2.default.array])
    };
    var defaultProps = {
        children: null,
        text: null,
        icon: null,
        size: 16,
        stroke: null,
        style: {
            container: {
                top: -8,
                right: -8
            }
        }
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    function getStyles(props, context) {
        var _context$uiTheme = context.uiTheme,
            badge = _context$uiTheme.badge,
            palette = _context$uiTheme.palette;
        var accent = props.accent,
            size = props.size,
            stroke = props.stroke;
        var local = {
            container: {},
            strokeContainer: {}
        };

        if (size && stroke) {
            var strokeSize = size;
            var contentSize = size - stroke;
            local.strokeContainer.width = strokeSize;
            local.strokeContainer.height = strokeSize;
            local.strokeContainer.borderRadius = strokeSize / 2;
            local.container.position = null;
            local.container.width = contentSize;
            local.container.height = contentSize;
            local.container.borderRadius = contentSize / 2;
        } else if (size && !stroke) {
            local.container.width = size;
            local.container.height = size;
            local.container.borderRadius = size / 2;
        }

        if (accent) {
            local.container.backgroundColor = palette.accentColor;
        }

        return {
            container: [badge.container, local.container, props.style.container],
            strokeContainer: [badge.strokeContainer, local.strokeContainer, props.style.strokeContainer],
            content: [badge.content, local.content, props.style.content]
        };
    }

    var mapIconProps = function mapIconProps(_ref) {
        var icon = _ref.icon,
            size = _ref.size;
        var iconProps = {};

        if (typeof icon === 'string') {
            iconProps.name = icon;
        } else {
            iconProps = icon;
        }

        if (!iconProps.size && size) {
            iconProps.size = size / 2;
        }

        return iconProps;
    };

    var Badge = _wrapComponent("Badge")(function (_PureComponent) {
        _inherits(Badge, _PureComponent);

        function Badge(props, context) {
            _classCallCheck(this, Badge);

            var _this = _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).call(this, props, context));

            _this.renderContent = _this.renderContent.bind(_this);
            _this.renderChildren = _this.renderChildren.bind(_this);
            return _this;
        }

        _createClass(Badge, [{
            key: "renderContent",
            value: function renderContent(styles) {
                var _props = this.props,
                    text = _props.text,
                    icon = _props.icon,
                    stroke = _props.stroke;
                var content = null;

                if (icon) {
                    var iconProps = mapIconProps(this.props);
                    content = _react3.default.createElement(_Icon2.default, _extends({}, iconProps, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 145
                        }
                    }));
                } else if (text) {
                    content = _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.content,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 147
                            }
                        },
                        text
                    );
                }

                var contentWrapper = _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 151
                        }
                    },
                    content
                );

                if (!stroke) {
                    return contentWrapper;
                }

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.strokeContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 161
                        }
                    },
                    contentWrapper
                );
            }
        }, {
            key: "renderChildren",
            value: function renderChildren() {
                var children = this.props.children;

                if (!children) {
                    return null;
                }

                return children;
            }
        }, {
            key: "render",
            value: function render() {
                var styles = getStyles(this.props, this.context);
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            flexDirection: 'row'
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 179
                        }
                    },
                    this.renderChildren(),
                    this.renderContent(styles)
                );
            }
        }]);

        return Badge;
    }(_react2.PureComponent));

    Badge.propTypes = propTypes;
    Badge.defaultProps = defaultProps;
    Badge.contextTypes = contextTypes;
    exports.default = Badge;
});