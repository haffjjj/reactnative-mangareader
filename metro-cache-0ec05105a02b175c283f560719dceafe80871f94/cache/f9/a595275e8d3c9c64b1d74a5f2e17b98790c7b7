__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-simple-dialogs/src/ConfirmDialog.js";

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _Dialog = _require(_dependencyMap[4], "./Dialog");

    var _Dialog2 = _interopRequireDefault(_Dialog);

    var _TouchableEffect = _require(_dependencyMap[5], "./TouchableEffect");

    var _TouchableEffect2 = _interopRequireDefault(_TouchableEffect);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        ConfirmDialog: {
            displayName: "ConfirmDialog"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-simple-dialogs/src/ConfirmDialog.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var OS = _reactNative.Platform.OS;
    var DEFAULT_COLOR_BUTTON = "#0000FF99";
    var DEFAULT_BACKGROUNDCOLOR_BUTTON = "transparent";

    var ConfirmDialog = _wrapComponent("ConfirmDialog")(function (_Component) {
        _inherits(ConfirmDialog, _Component);

        function ConfirmDialog() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, ConfirmDialog);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ConfirmDialog.__proto__ || Object.getPrototypeOf(ConfirmDialog)).call.apply(_ref, [this].concat(args))), _this), _this.getButtonStyle = function (button, positive) {
                var disabled = button.disabled;
                var style = button.style || {};

                var backgroundColor = style.backgroundColor,
                    backgroundColorDisabled = style.backgroundColorDisabled,
                    othersStyle = _objectWithoutProperties(style, ["backgroundColor", "backgroundColorDisabled"]);

                return _reactNative.Platform.select({
                    ios: _extends({
                        height: 46,
                        justifyContent: "center",
                        backgroundColor: (!disabled ? backgroundColor : backgroundColorDisabled || backgroundColor) || DEFAULT_BACKGROUNDCOLOR_BUTTON
                    }, othersStyle),
                    android: _extends({
                        backgroundColor: (!disabled ? backgroundColor : backgroundColorDisabled || backgroundColor) || DEFAULT_BACKGROUNDCOLOR_BUTTON
                    }, othersStyle)
                });
            }, _this.getButtonTextStyle = function (button, positive) {
                var disabled = button.disabled;
                var titleStyle = button.titleStyle || {};

                var color = titleStyle.color,
                    colorDisabled = titleStyle.colorDisabled,
                    othersStyle = _objectWithoutProperties(titleStyle, ["color", "colorDisabled"]);

                return _reactNative.Platform.select({
                    ios: _extends({
                        textAlign: "center",
                        textAlignVertical: "center",
                        color: (!disabled ? color : colorDisabled || color) || DEFAULT_COLOR_BUTTON,
                        fontWeight: positive ? "bold" : "normal"
                    }, othersStyle),
                    android: _extends({
                        height: 36,
                        minWidth: 64,
                        padding: 8,
                        textAlign: "center",
                        textAlignVertical: "center",
                        color: (!disabled ? color : colorDisabled || color) || DEFAULT_COLOR_BUTTON,
                        fontWeight: "bold"
                    }, othersStyle)
                });
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(ConfirmDialog, [{
            key: "renderMessage",
            value: function renderMessage() {
                var _props = this.props,
                    message = _props.message,
                    messageStyle = _props.messageStyle;
                var textAlign = OS === 'ios' ? "center" : null;
                if (message) return _react3.default.createElement(
                    _reactNative.Text,
                    {
                        style: [{
                            textAlign: textAlign,
                            color: "#00000089",
                            fontSize: 18
                        }, messageStyle],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 94
                        }
                    },
                    message
                );
            }
        }, {
            key: "renderButton",
            value: function renderButton(button, positive) {
                if (button) {
                    var onPress = button.onPress,
                        disabled = button.disabled,
                        color = button.color;
                    var title = OS === 'ios' ? button.title : button.title.toUpperCase();
                    var containerStyle = this.getButtonStyle(button, positive);
                    var textStyle = this.getButtonTextStyle(button, positive);
                    var touchableStyle = OS === 'ios' ? {
                        flex: 1
                    } : {};
                    return _react3.default.createElement(
                        _TouchableEffect2.default,
                        {
                            onPress: onPress,
                            disabled: disabled,
                            style: touchableStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 114
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: containerStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 115
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: textStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 116
                                    }
                                },
                                title
                            )
                        )
                    );
                }
            }
        }, {
            key: "renderButtons",
            value: function renderButtons() {
                var _props2 = this.props,
                    negativeButton = _props2.negativeButton,
                    positiveButton = _props2.positiveButton;
                var containerStyle = OS === 'ios' ? {
                    flexDirection: "row"
                } : {
                    flexDirection: "row",
                    justifyContent: "flex-end",
                    height: 36
                };
                var dividerVertStyle = OS === 'ios' ? {
                    width: negativeButton ? 1 : 0,
                    backgroundColor: "#00000011"
                } : {
                    width: 8
                };
                var dividerHoriStyle = OS === 'ios' ? {
                    height: 1,
                    backgroundColor: "#00000011"
                } : {
                    height: 0
                };
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 139
                        }
                    },
                    _react3.default.createElement(_reactNative.View, {
                        style: dividerHoriStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 140
                        }
                    }),
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: containerStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 141
                            }
                        },
                        this.renderButton(negativeButton, false),
                        _react3.default.createElement(_reactNative.View, {
                            style: dividerVertStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 143
                            }
                        }),
                        this.renderButton(positiveButton, true)
                    )
                );
            }
        }, {
            key: "renderContent",
            value: function renderContent() {
                var children = this.props.children;
                if (children) return children;else return this.renderMessage();
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(
                    _Dialog2.default,
                    _extends({}, this.props, {
                        buttons: this.renderButtons(),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 161
                        }
                    }),
                    this.renderContent()
                );
            }
        }]);

        return ConfirmDialog;
    }(_react2.Component));

    var buttonPropType = _propTypes2.default.shape({
        title: _propTypes2.default.string.isRequired,
        onPress: _propTypes2.default.func.isRequired,
        disabled: _propTypes2.default.bool,
        titleStyle: _propTypes2.default.shape(_extends({}, _reactNative.Text.propTypes.style, {
            colorDisabled: _propTypes2.default.string
        })),
        style: _propTypes2.default.shape(_extends({}, _reactNative.ViewPropTypes.style, {
            backgroundColorDisabled: _propTypes2.default.string
        }))
    });

    ConfirmDialog.propTypes = _extends({}, _Dialog2.default.propTypes, {
        message: _propTypes2.default.string,
        messageStyle: _reactNative.Text.propTypes.style,
        negativeButton: buttonPropType,
        positiveButton: buttonPropType.isRequired
    });
    exports.default = ConfirmDialog;
});