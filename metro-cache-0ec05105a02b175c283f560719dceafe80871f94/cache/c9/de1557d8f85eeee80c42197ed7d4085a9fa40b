__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/RippleFeedback/RippleFeedbackAndroid.react.js";

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        RippleFeedback: {
            displayName: "RippleFeedback"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/RippleFeedback/RippleFeedbackAndroid.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var propTypes = {
        color: _propTypes2.default.string,
        borderless: _propTypes2.default.bool,
        children: _propTypes2.default.node.isRequired
    };
    var defaultProps = {
        color: null,
        borderless: true
    };

    var isRippleVisible = function isRippleVisible(props) {
        return props.onPress || props.onLongPress || props.onPressIn || props.onPressOut;
    };

    var RippleFeedback = _wrapComponent("RippleFeedback")(function (_PureComponent) {
        _inherits(RippleFeedback, _PureComponent);

        function RippleFeedback() {
            _classCallCheck(this, RippleFeedback);

            return _possibleConstructorReturn(this, (RippleFeedback.__proto__ || Object.getPrototypeOf(RippleFeedback)).apply(this, arguments));
        }

        _createClass(RippleFeedback, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    children = _props.children,
                    color = _props.color,
                    borderless = _props.borderless,
                    otherProps = _objectWithoutProperties(_props, ["children", "color", "borderless"]);

                if (!isRippleVisible(this.props)) {
                    return children;
                }

                var mapProps = _extends({}, otherProps);

                if (color && _reactNative.Platform.Version >= 21) {
                    mapProps.background = _reactNative.TouchableNativeFeedback.Ripple(color, borderless);
                }

                return _react3.default.createElement(
                    _reactNative.TouchableNativeFeedback,
                    _extends({}, mapProps, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 41
                        }
                    }),
                    children
                );
            }
        }]);

        return RippleFeedback;
    }(_react2.PureComponent));

    RippleFeedback.propTypes = propTypes;
    RippleFeedback.defaultProps = defaultProps;
    exports.default = RippleFeedback;
});