__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Toolbar/Toolbar.react.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _utils = _require(_dependencyMap[4], "../utils");

    var _LeftElement = _require(_dependencyMap[5], "./LeftElement.react");

    var _LeftElement2 = _interopRequireDefault(_LeftElement);

    var _CenterElement = _require(_dependencyMap[6], "./CenterElement.react");

    var _CenterElement2 = _interopRequireDefault(_CenterElement);

    var _RightElement = _require(_dependencyMap[7], "./RightElement.react");

    var _RightElement2 = _interopRequireDefault(_RightElement);

    var _IconToggle = _require(_dependencyMap[8], "../IconToggle");

    var _IconToggle2 = _interopRequireDefault(_IconToggle);

    var _isFunction = _require(_dependencyMap[9], "../utils/isFunction");

    var _isFunction2 = _interopRequireDefault(_isFunction);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Toolbar: {
            displayName: "Toolbar"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Toolbar/Toolbar.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var propTypes = {
        isSearchActive: _propTypes2.default.bool,
        searchable: _propTypes2.default.shape({
            onChangeText: _propTypes2.default.func,
            onSearchClosed: _propTypes2.default.func,
            onSearchCloseRequested: _propTypes2.default.func,
            onSearchPressed: _propTypes2.default.func,
            onSubmitEditing: _propTypes2.default.func,
            placeholder: _propTypes2.default.string,
            autoFocus: _propTypes2.default.bool,
            autoCapitalize: _propTypes2.default.string,
            autoCorrect: _propTypes2.default.bool,
            icon: _propTypes2.default.string
        }),
        style: _propTypes2.default.shape({
            container: _utils.ViewPropTypes.style,
            leftElementContainer: _utils.ViewPropTypes.style,
            leftElement: _IconToggle2.default.propTypes.style,
            centerElementContainer: _utils.ViewPropTypes.style,
            titleText: _reactNative.Text.propTypes.style,
            rightElementContainer: _utils.ViewPropTypes.style,
            rightElement: _IconToggle2.default.propTypes.style
        }),
        size: _propTypes2.default.number,
        hidden: _propTypes2.default.bool,
        onPress: _propTypes2.default.func,
        leftElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string]),
        onLeftElementPress: _propTypes2.default.func,
        centerElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string]),
        rightElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.shape({
            actions: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string])),
            menu: _propTypes2.default.shape({
                icon: _propTypes2.default.string,
                labels: _propTypes2.default.arrayOf(_propTypes2.default.string)
            })
        })]),
        onRightElementPress: _propTypes2.default.func
    };
    var defaultProps = {
        style: {},
        hidden: false,
        isSearchActive: false,
        onRightElementPress: null,
        rightElement: null,
        searchable: null,
        onPress: null,
        centerElement: null,
        leftElement: null,
        onLeftElementPress: null,
        size: 24
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    var getBackButtonListener = function getBackButtonListener(callback) {
        return _utils.BackAndroid.addEventListener('hardwareBackPress', callback);
    };

    function getStyles(props, context) {
        var toolbar = context.uiTheme.toolbar;
        return {
            container: [toolbar.container, props.style.container]
        };
    }

    var Toolbar = _wrapComponent("Toolbar")(function (_PureComponent) {
        _inherits(Toolbar, _PureComponent);

        function Toolbar(props) {
            _classCallCheck(this, Toolbar);

            var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, props));

            _this.onSearchOpenRequested = function () {
                _this.setState({
                    isSearchActive: true,
                    searchValue: ''
                });

                _this.animateSearchBackground(function () {
                    _this.state.defaultScaleValue.setValue(0.01);

                    _this.setState({
                        order: 'searchFirst'
                    });

                    _this.backButtonListener = getBackButtonListener(_this.onSearchCloseRequested);
                });
            };

            _this.onSearchPressed = function () {
                _this.onSearchOpenRequested();

                var searchable = _this.props.searchable;

                if (searchable && (0, _isFunction2.default)(searchable.onSearchPressed)) {
                    searchable.onSearchPressed();
                }
            };

            _this.onSearchTextChanged = function (value) {
                var searchable = _this.props.searchable;

                if (searchable && (0, _isFunction2.default)(searchable.onChangeText)) {
                    searchable.onChangeText(value);
                }

                _this.setState({
                    searchValue: value
                });
            };

            _this.onSearchClearRequested = function () {
                _this.onSearchTextChanged('');
            };

            _this.onSearchCloseRequested = function () {
                if (_this.props.searchable.onSearchCloseRequested) {
                    _this.props.searchable.onSearchCloseRequested();
                }

                _this.setState({
                    isSearchActive: false,
                    searchValue: ''
                });

                _this.animateDefaultBackground(function () {
                    _this.state.searchScaleValue.setValue(0.01);

                    _this.setState({
                        order: 'defaultFirst'
                    });

                    _this.onSearchClosed();
                });

                return true;
            };

            _this.onSearchClosed = function () {
                var searchable = _this.props.searchable;

                if (_this.backButtonListener) {
                    _this.backButtonListener.remove();
                }

                if (searchable && (0, _isFunction2.default)(searchable.onSearchClosed)) {
                    searchable.onSearchClosed();
                }
            };

            _this.onLayout = function (event) {
                var _event$nativeEvent$la = event.nativeEvent.layout,
                    width = _event$nativeEvent$la.width,
                    height = _event$nativeEvent$la.height;
                var radius = Math.sqrt(Math.pow(height, 2) + Math.pow(width, 2));
                var diameter = radius * 2;
                var bgPosition = width - radius;
                var pointSize = diameter * 0.01;
                diameter += pointSize;

                _this.setState({
                    bgPosition: bgPosition,
                    radius: diameter / 2,
                    diameter: diameter
                });
            };

            _this.animateSearchBackground = function (onComplete) {
                _reactNative.Animated.timing(_this.state.searchScaleValue, {
                    toValue: 1,
                    duration: 325,
                    easing: _reactNative.Easing.bezier(0.0, 0.0, 0.2, 1),
                    useNativeDriver: true
                }).start(onComplete);
            };

            _this.animateDefaultBackground = function (onComplete) {
                _reactNative.Animated.timing(_this.state.defaultScaleValue, {
                    toValue: 1,
                    duration: 325,
                    easing: _reactNative.Easing.bezier(0.0, 0.0, 0.2, 1),
                    useNativeDriver: true
                }).start(onComplete);
            };

            _this.show = function () {
                var moveAnimated = _this.state.moveAnimated;

                _reactNative.Animated.timing(moveAnimated, {
                    toValue: 0,
                    duration: 225,
                    easing: _reactNative.Easing.bezier(0.0, 0.0, 0.2, 1),
                    useNativeDriver: true
                }).start();
            };

            _this.hide = function () {
                var moveAnimated = _this.state.moveAnimated;
                var styles = getStyles(_this.props, _this.context, _this.state);

                _reactNative.Animated.timing(moveAnimated, {
                    toValue: -1 * _reactNative.StyleSheet.flatten(styles.container).height,
                    duration: 195,
                    easing: _reactNative.Easing.bezier(0.4, 0.0, 0.6, 1),
                    useNativeDriver: true
                }).start();
            };

            _this.renderAnimatedBackgrounds = function (styles) {
                var _this$state = _this.state,
                    diameter = _this$state.diameter,
                    bgPosition = _this$state.bgPosition,
                    radius = _this$state.radius,
                    defaultScaleValue = _this$state.defaultScaleValue,
                    searchScaleValue = _this$state.searchScaleValue,
                    order = _this$state.order;
                var bgStyle = {
                    position: 'absolute',
                    top: -radius,
                    width: diameter,
                    height: diameter,
                    borderRadius: radius
                };
                var toolbarSearchActive = _this.context.uiTheme.toolbarSearchActive;

                var container = _reactNative.StyleSheet.flatten(styles.container);

                var searchActive = _reactNative.StyleSheet.flatten(toolbarSearchActive.container);

                var bgSearch = _react3.default.createElement(_reactNative.Animated.View, {
                    key: "searchBackground",
                    style: [bgStyle, {
                        left: bgPosition,
                        backgroundColor: searchActive.backgroundColor,
                        transform: [{
                            scale: searchScaleValue
                        }]
                    }],
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 388
                    }
                });

                var bgDefault = _react3.default.createElement(_reactNative.Animated.View, {
                    key: "defaultBackground",
                    style: [bgStyle, {
                        right: bgPosition,
                        backgroundColor: container.backgroundColor,
                        transform: [{
                            scale: defaultScaleValue
                        }]
                    }],
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 399
                    }
                });

                var content = null;

                if (order === 'defaultFirst') {
                    content = [bgDefault, bgSearch];
                } else {
                    content = [bgSearch, bgDefault];
                }

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: _reactNative.StyleSheet.absoluteFill,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 418
                        }
                    },
                    content
                );
            };

            var isSearchActive = props.isSearchActive || false;
            _this.backButtonListener = isSearchActive ? getBackButtonListener(_this.onSearchCloseRequested) : null;
            _this.state = {
                isSearchActive: isSearchActive,
                searchValue: '',
                defaultScaleValue: new _reactNative.Animated.Value(isSearchActive ? 0.01 : 1),
                searchScaleValue: new _reactNative.Animated.Value(isSearchActive ? 1 : 0.01),
                radius: 0,
                diameter: 0,
                order: isSearchActive ? 'searchFirst' : 'defaultFirst',
                positionValue: new _reactNative.Animated.Value(0)
            };
            return _this;
        }

        _createClass(Toolbar, [{
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
                if (this.state.isSearchActive && !nextProps.searchable) {
                    this.onSearchCloseRequested();
                }

                if (this.props.isSearchActive !== nextProps.isSearchActive) {
                    var nextIsSearchActive = !!nextProps.isSearchActive;

                    if (this.state.isSearchActive !== nextIsSearchActive) {
                        if (nextIsSearchActive) {
                            this.onSearchOpenRequested();
                        } else {
                            this.onSearchCloseRequested();
                        }
                    }
                }

                if (nextProps.hidden !== this.props.hidden) {
                    if (nextProps.hidden === true) {
                        this.hide();
                    } else {
                        this.show();
                    }
                }
            }
        }, {
            key: "focusSearchField",
            value: function focusSearchField() {
                this.searchFieldRef.focus();
            }
        }, {
            key: "render",
            value: function render() {
                var _props = this.props,
                    onLeftElementPress = _props.onLeftElementPress,
                    onPress = _props.onPress,
                    onRightElementPress = _props.onRightElementPress;
                var _state = this.state,
                    isSearchActive = _state.isSearchActive,
                    searchValue = _state.searchValue;
                var styles = getStyles(this.props, this.context, this.state);
                return _react3.default.createElement(
                    _reactNative.Animated.View,
                    {
                        onLayout: this.onLayout,
                        style: [styles.container, {
                            transform: [{
                                translateY: this.state.positionValue
                            }]
                        }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 435
                        }
                    },
                    this.renderAnimatedBackgrounds(styles),
                    _react3.default.createElement(_LeftElement2.default, _extends({}, this.props, {
                        onLeftElementPress: onLeftElementPress,
                        isSearchActive: isSearchActive,
                        onSearchClose: this.onSearchCloseRequested,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 443
                        }
                    })),
                    _react3.default.createElement(_CenterElement2.default, _extends({}, this.props, {
                        onPress: onPress,
                        searchValue: searchValue,
                        isSearchActive: isSearchActive,
                        onSearchTextChange: this.onSearchTextChanged,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 449
                        }
                    })),
                    _react3.default.createElement(_RightElement2.default, _extends({}, this.props, {
                        searchValue: searchValue,
                        isSearchActive: isSearchActive,
                        onSearchPress: this.onSearchPressed,
                        onSearchClearRequest: this.onSearchClearRequested,
                        onRightElementPress: onRightElementPress,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 456
                        }
                    }))
                );
            }
        }]);

        return Toolbar;
    }(_react2.PureComponent));

    Toolbar.propTypes = propTypes;
    Toolbar.defaultProps = defaultProps;
    Toolbar.contextTypes = contextTypes;
    exports.default = Toolbar;
});