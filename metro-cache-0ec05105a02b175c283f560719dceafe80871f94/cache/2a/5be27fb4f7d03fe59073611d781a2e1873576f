__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/ActionButton/ActionButton.react.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _color = _require(_dependencyMap[2], "color");

    var _color2 = _interopRequireDefault(_color);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _propTypes = _require(_dependencyMap[4], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _utils = _require(_dependencyMap[5], "../utils");

    var _Icon = _require(_dependencyMap[6], "../Icon");

    var _Icon2 = _interopRequireDefault(_Icon);

    var _IconToggle = _require(_dependencyMap[7], "../IconToggle");

    var _IconToggle2 = _interopRequireDefault(_IconToggle);

    var _RippleFeedback = _require(_dependencyMap[8], "../RippleFeedback");

    var _RippleFeedback2 = _interopRequireDefault(_RippleFeedback);

    var _getPlatformElevation = _require(_dependencyMap[9], "../styles/getPlatformElevation");

    var _getPlatformElevation2 = _interopRequireDefault(_getPlatformElevation);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        ActionButton: {
            displayName: "ActionButton"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/ActionButton/ActionButton.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    function darkenOrLighten(color) {
        var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        var c = (0, _color2.default)(color);
        return c.luminosity() > 0.5 ? c.darken(ratio) : c.lighten(ratio);
    }

    var propTypes = {
        actions: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.arrayOf(_propTypes2.default.element), _propTypes2.default.arrayOf(_propTypes2.default.shape({
            icon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
            label: _propTypes2.default.string,
            name: _propTypes2.default.string
        }))]),
        onPress: _propTypes2.default.func,
        onLongPress: _propTypes2.default.func,
        hidden: _propTypes2.default.bool,
        icon: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string]),
        transition: _propTypes2.default.oneOf(['toolbar', 'speedDial']),
        rippleColor: _propTypes2.default.string,
        style: _propTypes2.default.shape({
            container: _utils.ViewPropTypes.style,
            icon: _reactNative.Text.propTypes.style
        })
    };
    var defaultProps = {
        actions: null,
        onPress: null,
        onLongPress: null,
        transition: null,
        icon: 'add',
        style: {},
        hidden: false,
        rippleColor: null
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    function getStyles(props, context, state) {
        var actionButton = context.uiTheme.actionButton;
        var size = props.size;
        var local = {
            container: {}
        };

        if (size) {
            local.container = {
                height: size,
                width: size,
                borderRadius: size / 2
            };
        }

        local.container = _extends({}, local.container, (0, _getPlatformElevation2.default)(state.elevation));
        return {
            positionContainer: [actionButton.positionContainer, local.positionContainer, props.style.positionContainer],
            toolbarPositionContainer: [actionButton.toolbarPositionContainer, local.toolbarPositionContainer, props.style.toolbarPositionContainer],
            container: [actionButton.container, local.container, props.style.container],
            overlayContainer: [actionButton.overlayContainer, local.overlayContainer, props.style.overlayContainer],
            toolbarContainer: [actionButton.toolbarContainer, local.toolbarContainer, props.style.toolbarContainer],
            toolbarActionContainer: [actionButton.toolbarActionContainer, local.toolbarActionContainer, props.style.toolbarActionContainer],
            speedDialContainer: [actionButton.speedDialContainer, local.speedDialContainer, props.style.speedDialContainer],
            speedDialActionContainer: [actionButton.speedDialActionContainer, local.speedDialActionContainer, props.style.speedDialActionContainer],
            speedDialActionLabel: [actionButton.speedDialActionLabel, local.speedDialActionLabel, props.style.speedDialActionLabel],
            speedDialActionLabelContainer: [actionButton.speedDialActionLabelContainer, local.speedDialActionLabelContainer, props.style.speedDialActionLabelContainer],
            speedDialActionIconContainer: [actionButton.speedDialActionIconContainer, local.speedDialActionIconContainer, props.style.speedDialActionIconContainer],
            speedDialActionIcon: [actionButton.speedDialActionIcon, local.speedDialActionIcon, props.style.speedDialActionIcon],
            icon: [actionButton.icon, local.icon, props.style.icon]
        };
    }

    var getRippleContainerStyle = function getRippleContainerStyle(containerStyle) {
        var flattenContainer = _reactNative.StyleSheet.flatten(containerStyle);

        var height = flattenContainer.height,
            width = flattenContainer.width,
            borderRadius = flattenContainer.borderRadius;
        return {
            container: {
                height: height,
                width: width,
                borderRadius: borderRadius
            }
        };
    };

    var ActionButton = _wrapComponent("ActionButton")(function (_PureComponent) {
        _inherits(ActionButton, _PureComponent);

        function ActionButton(props) {
            _classCallCheck(this, ActionButton);

            var _this = _possibleConstructorReturn(this, (ActionButton.__proto__ || Object.getPrototypeOf(ActionButton)).call(this, props));

            _this.onPress = function (action) {
                var onPress = _this.props.onPress;

                _this.toggleState();

                if (onPress) {
                    onPress(action);
                }
            };

            _this.getActionItemKey = function (_ref) {
                var icon = _ref.icon,
                    name = _ref.name;
                var key = icon;

                if (name) {
                    key = name;
                } else if (_react3.default.isValidElement(icon) && icon.key) {
                    key = icon.key;
                }

                return key;
            };

            _this.toggleState = function () {
                var transition = _this.props.transition;

                if (_this.state.render === 'button') {
                    if (transition) {
                        _this.setState({
                            render: transition
                        });
                    }
                } else {
                    _this.setState({
                        render: 'button'
                    });
                }
            };

            _this.show = function () {};

            _this.hide = function () {};

            _this.renderToolbarTransition = function (styles) {
                var actions = _this.props.actions;
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.toolbarPositionContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 276
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            key: "main-button",
                            style: styles.toolbarContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 277
                            }
                        },
                        actions.map(function (action) {
                            if (typeof action === 'string') {
                                return _this.renderToolbarAction(styles, action);
                            }

                            if (_react3.default.isValidElement(action)) {
                                return _this.renderToolbarElementAction(styles, action);
                            }

                            var icon = action.icon,
                                label = action.label,
                                name = action.name;
                            return _this.renderToolbarLabelAction(styles, icon, label, name);
                        })
                    )
                );
            };

            _this.renderSpeedDialTransition = function (styles) {
                var actions = _this.props.actions;
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: [_reactNative.StyleSheet.absoluteFillObject, {
                            flex: 1
                        }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 298
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.TouchableWithoutFeedback,
                        {
                            onPress: _this.toggleState,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 299
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.overlayContainer,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 300
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.View,
                                {
                                    style: [styles.positionContainer, styles.speedDialContainer],
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 301
                                    }
                                },
                                _react3.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: {
                                            alignItems: 'flex-end',
                                            marginBottom: 16
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 302
                                        }
                                    },
                                    actions.map(function (action) {
                                        if (typeof action === 'string') {
                                            return _this.renderAction(styles, action);
                                        }

                                        if (_react3.default.isValidElement(action)) {
                                            return _this.renderElementAction(styles, action);
                                        }

                                        var icon = action.icon,
                                            label = action.label,
                                            name = action.name;
                                        return _this.renderLabelAction(styles, icon, label, name);
                                    })
                                ),
                                _this.renderMainButton(styles)
                            )
                        )
                    )
                );
            };

            _this.renderMainButton = function (styles) {
                var _this$props = _this.props,
                    onLongPress = _this$props.onLongPress,
                    icon = _this$props.icon;
                var render = _this.state.render;
                var mainIcon = render !== 'button' ? 'clear' : icon;
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        key: "main-button",
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 331
                        }
                    },
                    _react3.default.createElement(
                        _RippleFeedback2.default,
                        {
                            style: getRippleContainerStyle(styles.container),
                            color: _this.getRippleColor(),
                            onPress: function onPress() {
                                return _this.onPress('main-button');
                            },
                            onLongPress: onLongPress,
                            delayPressIn: 20,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 332
                            }
                        },
                        _this.renderIconButton(styles, mainIcon)
                    )
                );
            };

            _this.renderToolbarAction = function (styles, icon, name) {
                var content = void 0;

                var key = _this.getActionItemKey({
                    icon: icon,
                    name: name
                });

                if (_react3.default.isValidElement(icon)) {
                    content = _react3.default.createElement(
                        _RippleFeedback2.default,
                        {
                            color: _this.getRippleColor(),
                            onPress: function onPress() {
                                return _this.onPress(key);
                            },
                            delayPressIn: 20,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 350
                            }
                        },
                        _this.renderIconButton(styles, icon)
                    );
                } else {
                    content = _react3.default.createElement(_IconToggle2.default, {
                        key: key,
                        name: key,
                        onPress: function onPress() {
                            return _this.onPress(key);
                        },
                        style: {
                            icon: styles.icon
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 359
                        }
                    });
                }

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        key: key,
                        style: styles.toolbarActionContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 367
                        }
                    },
                    content
                );
            };

            _this.renderToolbarElementAction = function (styles, icon) {
                var key = _this.getActionItemKey({
                    icon: icon
                });

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        key: key,
                        style: styles.toolbarActionContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 375
                        }
                    },
                    _this.renderToolbarAction(styles, icon)
                );
            };

            _this.renderToolbarLabelAction = function (styles, icon, label, name) {
                var key = _this.getActionItemKey({
                    icon: icon,
                    name: name
                });

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        key: key,
                        style: styles.toolbarActionContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 386
                        }
                    },
                    _this.renderToolbarAction(styles, icon, name)
                );
            };

            _this.renderAction = function (styles, icon, name) {
                var key = _this.getActionItemKey({
                    icon: icon,
                    name: name
                });

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        key: key,
                        style: styles.speedDialActionIconContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 394
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.speedDialActionIcon,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 395
                            }
                        },
                        _react3.default.createElement(
                            _RippleFeedback2.default,
                            {
                                style: getRippleContainerStyle(styles.speedDialActionIcon),
                                color: _this.getRippleColor(),
                                onPress: function onPress() {
                                    return _this.onPress(key);
                                },
                                delayPressIn: 20,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 396
                                }
                            },
                            _this.renderIconButton(styles, icon)
                        )
                    )
                );
            };

            _this.renderElementAction = function (styles, icon) {
                var key = _this.getActionItemKey({
                    icon: icon
                });

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        key: key,
                        style: styles.speedDialActionContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 411
                        }
                    },
                    _this.renderAction(styles, icon)
                );
            };

            _this.renderLabelAction = function (styles, icon, label, name) {
                var key = _this.getActionItemKey({
                    icon: icon,
                    name: name
                });

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        key: key,
                        style: styles.speedDialActionContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 419
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.speedDialActionLabelContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 420
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.speedDialActionLabel,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 421
                                }
                            },
                            label
                        )
                    ),
                    _this.renderAction(styles, icon, name)
                );
            };

            _this.renderIconButton = function (styles, icon) {
                var result = void 0;

                if (_react3.default.isValidElement(icon)) {
                    result = icon;
                } else {
                    result = _react3.default.createElement(_Icon2.default, {
                        name: icon,
                        style: styles.icon,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 432
                        }
                    });
                }

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            flex: 1,
                            alignItems: 'center',
                            justifyContent: 'center'
                        },
                        pointerEvents: "box-only",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 435
                        }
                    },
                    result
                );
            };

            _this.renderButton = function (styles) {
                return _react3.default.createElement(
                    _reactNative.Animated.View,
                    {
                        style: styles.positionContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 441
                        }
                    },
                    _this.renderMainButton(styles)
                );
            };

            _this.state = {
                render: 'button'
            };
            return _this;
        }

        _createClass(ActionButton, [{
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
                if (nextProps.hidden !== this.props.hidden) {
                    if (nextProps.hidden === true) {
                        this.hide();
                    } else {
                        this.show();
                    }
                }
            }
        }, {
            key: "componentWillUpdate",
            value: function componentWillUpdate(nextProps, nextState) {
                if (this.state.render !== nextState.render) {
                    _reactNative.LayoutAnimation.easeInEaseOut();
                }
            }
        }, {
            key: "getRippleColor",
            value: function getRippleColor() {
                var rippleColor = this.props.rippleColor;

                if (rippleColor) {
                    return rippleColor;
                }

                var styles = getStyles(this.props, this.context, this.state);

                var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(styles.container),
                    backgroundColor = _StyleSheet$flatten.backgroundColor;

                return darkenOrLighten(backgroundColor).toString();
            }
        }, {
            key: "render",
            value: function render() {
                var render = this.state.render;
                var styles = getStyles(this.props, this.context, this.state);

                if (render === 'toolbar') {
                    return this.renderToolbarTransition(styles);
                } else if (render === 'speedDial') {
                    return this.renderSpeedDialTransition(styles);
                }

                return this.renderButton(styles);
            }
        }]);

        return ActionButton;
    }(_react2.PureComponent));

    ActionButton.propTypes = propTypes;
    ActionButton.defaultProps = defaultProps;
    ActionButton.contextTypes = contextTypes;
    exports.default = ActionButton;
});