__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-simple-dialogs/src/ProgressDialog.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _Dialog = _require(_dependencyMap[4], "./Dialog");

    var _Dialog2 = _interopRequireDefault(_Dialog);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        ProgressDialog: {
            displayName: "ProgressDialog"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-simple-dialogs/src/ProgressDialog.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var ProgressDialog = _wrapComponent("ProgressDialog")(function (_Component) {
        _inherits(ProgressDialog, _Component);

        function ProgressDialog() {
            _classCallCheck(this, ProgressDialog);

            return _possibleConstructorReturn(this, (ProgressDialog.__proto__ || Object.getPrototypeOf(ProgressDialog)).apply(this, arguments));
        }

        _createClass(ProgressDialog, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    message = _props.message,
                    messageStyle = _props.messageStyle,
                    activityIndicatorColor = _props.activityIndicatorColor,
                    activityIndicatorSize = _props.activityIndicatorSize,
                    activityIndicatorStyle = _props.activityIndicatorStyle;
                return _react3.default.createElement(
                    _Dialog2.default,
                    _extends({}, this.props, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 42
                        }
                    }),
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flexDirection: 'row',
                                alignItems: 'center'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 43
                            }
                        },
                        _react3.default.createElement(_reactNative.ActivityIndicator, {
                            animating: true,
                            color: activityIndicatorColor,
                            size: activityIndicatorSize,
                            style: activityIndicatorStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 44
                            }
                        }),
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: [{
                                    marginLeft: 20,
                                    fontSize: 18,
                                    color: "#00000089"
                                }, messageStyle],
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 45
                                }
                            },
                            message
                        )
                    )
                );
            }
        }]);

        return ProgressDialog;
    }(_react2.Component));

    ProgressDialog.propTypes = _extends({}, _Dialog2.default.propTypes, {
        message: _propTypes2.default.string.isRequired,
        messageStyle: _reactNative.Text.propTypes.style,
        activityIndicatorColor: _reactNative.ActivityIndicator.propTypes.color,
        activityIndicatorSize: _reactNative.ActivityIndicator.propTypes.size,
        activityIndicatorStyle: _reactNative.ActivityIndicator.propTypes.style
    });
    delete ProgressDialog.propTypes.children;
    exports.default = ProgressDialog;
});