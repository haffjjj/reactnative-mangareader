__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Toolbar/RightElement.react.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _utils = _require(_dependencyMap[4], "../utils");

    var _IconToggle = _require(_dependencyMap[5], "../IconToggle");

    var _IconToggle2 = _interopRequireDefault(_IconToggle);

    var _isFunction = _require(_dependencyMap[6], "../utils/isFunction");

    var _isFunction2 = _interopRequireDefault(_isFunction);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        RightElement: {
            displayName: "RightElement"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/neo/NodeJS/Rn/learn/node_modules/react-native-material-ui/src/Toolbar/RightElement.react.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var UIManager = _reactNative.NativeModules.UIManager;
    var propTypes = {
        rightElementTestID: _propTypes2.default.string,
        isSearchActive: _propTypes2.default.bool.isRequired,
        searchValue: _propTypes2.default.string.isRequired,
        searchable: _propTypes2.default.object,
        style: _propTypes2.default.shape({
            rightElementContainer: _utils.ViewPropTypes.style,
            rightEle: _utils.ViewPropTypes.style
        }),
        size: _propTypes2.default.number,
        rightElement: _propTypes2.default.any,
        onRightElementPress: _propTypes2.default.func,
        onSearchClearRequest: _propTypes2.default.func.isRequired,
        onSearchPress: _propTypes2.default.func.isRequired
    };
    var defaultProps = {
        rightElementTestID: null,
        rightElement: null,
        onRightElementPress: null,
        size: null,
        style: {},
        searchable: null
    };
    var contextTypes = {
        uiTheme: _propTypes2.default.object.isRequired
    };

    function getStyles(props, context) {
        var isSearchActive = props.isSearchActive;
        var _context$uiTheme = context.uiTheme,
            toolbar = _context$uiTheme.toolbar,
            toolbarSearchActive = _context$uiTheme.toolbarSearchActive;
        return {
            rightElementContainer: [toolbar.rightElementContainer, isSearchActive && toolbarSearchActive.rightElementContainer, props.style.rightElementContainer],
            rightElement: [toolbar.rightElement, isSearchActive && toolbarSearchActive.rightElement, props.style.rightElement]
        };
    }

    var RightElement = _wrapComponent("RightElement")(function (_PureComponent) {
        _inherits(RightElement, _PureComponent);

        function RightElement() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, RightElement);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RightElement.__proto__ || Object.getPrototypeOf(RightElement)).call.apply(_ref, [this].concat(args))), _this), _this.onMenuPressed = function (labels) {
                var onRightElementPress = _this.props.onRightElementPress;
                UIManager.showPopupMenu((0, _reactNative.findNodeHandle)(_this.menu), labels, function () {}, function (result, index) {
                    if (onRightElementPress) {
                        onRightElementPress({
                            action: 'menu',
                            result: result,
                            index: index
                        });
                    }
                });
            }, _this.onSearchPressed = function () {
                var onSearchPress = _this.props.onSearchPress;

                if ((0, _isFunction2.default)(onSearchPress)) {
                    onSearchPress();
                }
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(RightElement, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var _props = this.props,
                    rightElementTestID = _props.rightElementTestID,
                    isSearchActive = _props.isSearchActive,
                    rightElement = _props.rightElement,
                    onRightElementPress = _props.onRightElementPress,
                    searchable = _props.searchable,
                    size = _props.size,
                    searchValue = _props.searchValue,
                    onSearchClearRequest = _props.onSearchClearRequest;
                var styles = getStyles(this.props, this.context, this.state);

                if (!rightElement && !searchable) {
                    return null;
                }

                var actionsMap = [];
                var result = [];

                if (rightElement) {
                    if (typeof rightElement === 'string') {
                        actionsMap.push(rightElement);
                    } else if (Array.isArray(rightElement)) {
                        actionsMap = rightElement;
                    } else if (rightElement.actions) {
                        actionsMap = rightElement.actions;
                    }
                }

                var flattenRightElement = _reactNative.StyleSheet.flatten(styles.rightElement);

                if (actionsMap) {
                    result = actionsMap.map(function (action, index) {
                        if (_react3.default.isValidElement(action)) {
                            return action;
                        }

                        return _react3.default.createElement(_IconToggle2.default, {
                            key: action,
                            name: action,
                            color: flattenRightElement.color,
                            size: size,
                            style: flattenRightElement,
                            onPress: function onPress() {
                                return onRightElementPress && onRightElementPress({
                                    action: action,
                                    index: index
                                });
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 126
                            }
                        });
                    });
                }

                if (_react3.default.isValidElement(rightElement)) {
                    result.push(_react3.default.cloneElement(rightElement, {
                        key: 'customRightElement'
                    }));
                }

                if (searchable) {
                    if (isSearchActive) {
                        result = [];

                        if (searchValue.length > 0) {
                            result.push(_react3.default.createElement(_IconToggle2.default, {
                                key: "searchClear",
                                name: "clear",
                                color: flattenRightElement.color,
                                size: size,
                                style: flattenRightElement,
                                onPress: onSearchClearRequest,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 153
                                }
                            }));
                        }
                    } else {
                        result.push(_react3.default.createElement(_IconToggle2.default, {
                            key: "searchIcon",
                            name: searchable.icon ? searchable.icon : 'search',
                            color: flattenRightElement.color,
                            size: size,
                            style: flattenRightElement,
                            onPress: this.onSearchPressed,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 163
                            }
                        }));
                    }
                }

                if (rightElement && rightElement.menu && !isSearchActive) {
                    var view = _react3.default.createElement(
                        _reactNative.View,
                        {
                            key: "menuIcon",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 176
                            }
                        },
                        _react3.default.createElement(_reactNative.View, {
                            ref: function ref(c) {
                                _this2.menu = c;
                            },
                            style: {
                                backgroundColor: 'transparent',
                                width: 1,
                                height: _reactNative.StyleSheet.hairlineWidth
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 180
                            }
                        }),
                        _react3.default.createElement(_IconToggle2.default, {
                            name: rightElement.menu.icon || 'more-vert',
                            color: flattenRightElement.color,
                            size: size,
                            onPress: function onPress() {
                                return _this2.onMenuPressed(rightElement.menu.labels);
                            },
                            style: flattenRightElement,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 188
                            }
                        })
                    );

                    result.push(view);
                }

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        testID: rightElementTestID,
                        style: styles.rightElementContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 202
                        }
                    },
                    result
                );
            }
        }]);

        return RightElement;
    }(_react2.PureComponent));

    RightElement.propTypes = propTypes;
    RightElement.defaultProps = defaultProps;
    RightElement.contextTypes = contextTypes;
    exports.default = RightElement;
});